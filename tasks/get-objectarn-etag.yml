---
- name: List objects in location KeyPrefix
  aws_s3:
    bucket: '{{ key.split("/")[0] }}'
    prefix: '{{ key.split("/")[1:] | join("/") }}'
    mode: list
  vars:
    key: '{{ item.location.KeyPrefix }}'
  loop: '{{ s3_batch_operations }}'
  register: list_keys
  when: item.location is defined

- name: Create first placeholder list with associated keys
  set_fact:
    _s3_batch_operations: |
      {{ _s3_batch_operations | d([]) + [item.0 | combine({"checksum_key": item.1.s3_keys | d (False) 
      | select("contains", checksum_search) | list | last | d (False) }, {"json_key": item.1.s3_keys | d (False) 
      | select("contains", json_search) | list | last | d (False) })] }}
  vars:
    checksum_search: '{{ location_is_latest | ternary("manifest.checksum", checksum_full) }}'
    checksum_full: '{{ location_date_string }}/manifest.checksum'
    json_search: '{{ location_is_latest | ternary("manifest.json", json_full) }}'
    json_full: '{{ location_date_string }}/manifest.json'
    location: '{{ item.0.location | d () }}'
    location_date: '{{ location.Date | d () | lower }}'
    location_date_string: '{{ location_date }}T00-00Z'
    location_is_latest: '{{ location_date == "latest" | d (False) }}'
    manifest: '{{ item.0.manifest | d (s3_batch_operation.manifest) }}'
  loop: '{{ s3_batch_operations | zip(list_keys.results) | list }}'

- name: Assert that specified date is valid
  assert:
    that:
      - item.checksum_key
      - item.json_key
    quiet: yes
    fail_msg: 'No matching key was found in S3 for the given date, please check the KeyPrefix or date.'
  when: 
    - location_date_input != 'latest'
    - item.manifest.Location is undefined
  loop: '{{ _s3_batch_operations }}'
  vars:
    location_date_input: '{{ item.location.Date | d () | lower }}'

- name: Get checksum values as string
  aws_s3:
    bucket: '{{ key.split("/")[0] }}'
    object: '{{ item.checksum_key }}'
    mode: getstr
  register: checksum_values
  loop: '{{ _s3_batch_operations }}'
  when: item.checksum_key
  vars:
    key: '{{ item.location.KeyPrefix }}'

- name: Create finalized input list 
  set_fact:
    __s3_batch_operations: |
      {{ __s3_batch_operations | d([]) + [item.0 | combine({"manifest": {"Location": {"ETag": item.1.contents | d (item.0.manifest.Location.ETag) | d () | trim,
      "ObjectArn": item.0.checksum_key | ternary(object_arn_string, item.0.manifest.Location.ObjectArn) }}}, recursive=True)] }}
  vars:
    key: '{{ item.0.location.KeyPrefix | d () }}'
    object_arn_string: 'arn:aws:s3:::{{ key.split("/")[0] }}/{{ item.0.json_key }}'
  loop: '{{ _s3_batch_operations | zip(checksum_values.results) | list }}'

- debug:
    var: __s3_batch_operations

- pause: